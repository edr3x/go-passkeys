// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: passkey.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addCredential = `-- name: AddCredential :exec
INSERT INTO
    credentials (
        id,
        user_id,
        public_key,
        sign_count,
        transports,
        attestation_type,
        aaguid,
        attestation,
        flags,
        clone_warning,
        attachment
    )
VALUES
    ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
`

type AddCredentialParams struct {
	ID              []byte        `json:"id"`
	UserID          uuid.UUID     `json:"user_id"`
	PublicKey       []byte        `json:"public_key"`
	SignCount       int64         `json:"sign_count"`
	Transports      []string      `json:"transports"`
	AttestationType pgtype.Text   `json:"attestation_type"`
	Aaguid          uuid.NullUUID `json:"aaguid"`
	Attestation     []byte        `json:"attestation"`
	Flags           []byte        `json:"flags"`
	CloneWarning    pgtype.Bool   `json:"clone_warning"`
	Attachment      pgtype.Text   `json:"attachment"`
}

func (q *Queries) AddCredential(ctx context.Context, arg AddCredentialParams) error {
	_, err := q.db.Exec(ctx, addCredential,
		arg.ID,
		arg.UserID,
		arg.PublicKey,
		arg.SignCount,
		arg.Transports,
		arg.AttestationType,
		arg.Aaguid,
		arg.Attestation,
		arg.Flags,
		arg.CloneWarning,
		arg.Attachment,
	)
	return err
}

const getUserPasskeyCredentials = `-- name: GetUserPasskeyCredentials :many
SELECT
    id, user_id, public_key, sign_count, transports, attestation_type, aaguid, attestation, flags, clone_warning, attachment, created_at, updated_at
FROM
    credentials c
WHERE
    c.user_id = $1
`

func (q *Queries) GetUserPasskeyCredentials(ctx context.Context, userID uuid.UUID) ([]Credential, error) {
	rows, err := q.db.Query(ctx, getUserPasskeyCredentials, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Credential{}
	for rows.Next() {
		var i Credential
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PublicKey,
			&i.SignCount,
			&i.Transports,
			&i.AttestationType,
			&i.Aaguid,
			&i.Attestation,
			&i.Flags,
			&i.CloneWarning,
			&i.Attachment,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCredential = `-- name: UpdateCredential :exec
UPDATE
    credentials
SET
    sign_count = $2,
    updated_at = NOW()
WHERE
    id = $1
`

type UpdateCredentialParams struct {
	ID        []byte `json:"id"`
	SignCount int64  `json:"sign_count"`
}

func (q *Queries) UpdateCredential(ctx context.Context, arg UpdateCredentialParams) error {
	_, err := q.db.Exec(ctx, updateCredential, arg.ID, arg.SignCount)
	return err
}
